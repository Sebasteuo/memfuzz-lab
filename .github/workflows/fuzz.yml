name: Fuzzing Pipeline

on:
  workflow_dispatch:

jobs:
  fuzz:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v4

      # ---------- Build target ----------
      - name: Build png_parser
        run: bash ./targets/png_parser/build.sh

      # ---------- Run AFL++ (30â€¯s de prueba) ----------
      - name: Run AFL++ (30 s)
        run: |
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \
          timeout 30s afl-fuzz \
            -i ./targets/png_parser/corpus \
            -o out -- ./targets/png_parser/build/pngparse @@ || true

      # ---------- Package crashes ----------
      - name: Package crashes
        if: ${{ hashFiles('out/default/crashes/id:*') != '' }}
        run: tar -C out/default -czf crashes-png_parser.tar.gz crashes

      - name: Upload crashes
        if: ${{ hashFiles('crashes-png_parser.tar.gz') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: crashes-png_parser
          path: crashes-png_parser.tar.gz

  analyze:
    needs: fuzz
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: crashes-png_parser
          path: .

      - name: Install gh CLI + llvm-symbolizer
        run: |
          apt-get update -qq
          apt-get install -y --no-install-recommends gh llvm

      - name: Rebuild target (symbols)
        run: bash ./targets/png_parser/build.sh

      # ---------- Symbolize & create Issue ----------
      - name: Symbolize & create Issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          trap 'exit 0' EXIT

          [ -f crashes-png_parser.tar.gz ] || exit 0
          mkdir -p work
          tar -xzf crashes-png_parser.tar.gz -C work

          BIN=$(find ./targets/png_parser/build -type f -perm -111 | head -1)

          for f in $(find work/crashes -type f -name 'id:*'); do
            # ----- stack trace -----
            ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \
            ASAN_OPTIONS=symbolize=1:detect_leaks=0 \
            "$BIN" "$f" 2>&1 > "$(basename "$f").txt" || true
            sleep 2

            summary=$(grep -m1 -v '^$' "$(basename "$f").txt" | cut -c1-120)
            [ -z "$summary" ] && summary="ASAN SEGV crash"
            title="Crash: $summary [$(date +%F-%H%M)]"
            crash_file=$(basename "$f")

cat > issue_body.md <<EOF_MD
### ðŸ’¥ Fuzzing crash detected

**Target**: \`png_parser\`

**Input**: \`$crash_file\`

#### Stack trace
\`\`\`
$(cat "$(basename "$f").txt")
\`\`\`

#### Reproduce locally
\`\`\`bash
./targets/png_parser/build/pngparse work/crashes/$crash_file
\`\`\`
EOF_MD

            gh issue create --title "$title" --body-file issue_body.md || true
          done
