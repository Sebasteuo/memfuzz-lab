name: Fuzzing Pipeline
on:
  workflow_dispatch:
    inputs:
      fuzz_timeout:
        description: "AFL++ runtime (e.g., 2m, 5m, 10m, 0 for unlimited)"
        required: false
        default: "2m"
  workflow_dispatch:
    inputs:
      fuzz_timeout:
        description: "AFL++ runtime (e.g., 2m, 5m, 10m, 0 for unlimited)"
        required: false
        default: "2m"
  workflow_dispatch:
    inputs:
      fuzz_timeout:
        description: "Max fuzzing time (e.g. 30s, 5m, 0 = unlimited)"
        default: "30s"
        required: false
  push:
    branches: [main]
jobs:
  fuzz:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - target: png_parser
          - target: xxd
          - target: crasher
    env:
      OUT_DIR: out/default
    steps:
      - name: Checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install AFL++ and libpng
        run: |
          sudo apt-get update
          sudo apt-get install -y afl++ libpng-dev
      # ----------- build according to the target -----------
      - name: Build target (ASan)
        shell: bash
        run: |
          export CC=afl-clang-fast
          export CXX=afl-clang-fast++
          CFLAGS="-g -O2 -fsanitize=address -fno-omit-frame-pointer"

          if [ "${{ matrix.target }}" = "png_parser" ]; then
            mkdir -p targets/png_parser/build
            ${CC} ${CFLAGS} targets/png_parser/src/pngparse.c \
                  -o targets/png_parser/build/pngparse -lpng -lz
          else
            mkdir -p targets/xxd/build
            ${CC} ${CFLAGS} targets/xxd/src/xxd.c \
                  -o targets/xxd/build/xxd
          fi
      # ----------- ejecutar AFL++ -----------
      - name: Run AFL++
        shell: bash
        env:
          TIMEOUT: ${{ github.event.inputs.fuzz_timeout || '30s' }}
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1
        run: |
          TARGET="${{ matrix.target }}"
          mkdir -p ${OUT_DIR}

          if [ "$TARGET" = "png_parser" ]; then
            BIN=targets/png_parser/build/pngparse
            CORP=targets/png_parser/corpus
          else
            BIN=targets/xxd/build/xxd
            CORP=targets/xxd/corpus
          fi

          if [ "$TIMEOUT" = "0" ]; then
            echo "Running fuzzing with NO timeout (CI limit 6h)…"
            afl-fuzz -i "$CORP" -o ${OUT_DIR} -- "$BIN" @@
          else
            echo "Running fuzzing for $TIMEOUT …"
            timeout "$TIMEOUT" \
              afl-fuzz -i "$CORP" -o ${OUT_DIR} -- "$BIN" @@ \
              || [ $? = 124 ]
          fi
      # ----------- empaquetar crashes -----------
      - name: Package crashes
        id: pkg
        shell: bash
        run: "echo \"\U0001F4E6 Packaging crashes (if any)…\"\nif compgen -G '${OUT_DIR}/crashes/id:*' > /dev/null; then\n  tar -czf crashes-${{ matrix.target }}.tar.gz -C ${OUT_DIR} crashes\n  echo \"has_crash=true\" >> \"$GITHUB_OUTPUT\"\nelse\n  echo \"has_crash=false\" >> \"$GITHUB_OUTPUT\"\nfi\n"
      - name: Upload crashes artefact
        if: steps.pkg.outputs.has_crash == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
        retention-days: 14
          name: crashes-${{ matrix.target }}
          path: crashes-${{ matrix.target }}.tar.gz
      # ----------- simbolizar y crear Issue -----------
      - name: Symbolize & create Issue
        if: steps.pkg.outputs.has_crash == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: "tar -xzf crashes-${{ matrix.target }}.tar.gz -C .\nif [ \"${{ matrix.target }}\" = \"png_parser\" ]; then\n  BIN=targets/png_parser/build/pngparse\nelse\n  BIN=targets/xxd/build/xxd\nfi\n\nfor f in crashes/id:*; do\n  out=$(mktemp)\n  ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \\\n  ASAN_OPTIONS=symbolize=1:detect_leaks=0 \\\n  \"$BIN\" \"$f\" 2>&1 | tee \"$out\" >/dev/null || true\n\n  title=$(grep -m1 -v '^$' \"$out\" | cut -c1-120)\n  [ -z \"$title\" ] && title=\"ASAN crash\"\n  title=\"Crash: ${title} [${{ matrix.target }}]\"\n\n  gh issue create \\\n    --title \"$title\" \\\n    --label auto-crash \\\n    --body \"$(printf '### \U0001F4A5 Crash in **%s**\\n\\n**Input**: `%s`\\n\\n```text\\n%s\\n```' \"${{ matrix.target }}\" \"$(basename \"$f\")\" \"$(cat \"$out\")\")\"\ndone\n"
  crasher_old:
    name: fuzz (crasher)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
    env:
      AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: "1"
      AFL_SKIP_CPUFREQ: "1"
      CC: afl-clang-fast
      CFLAGS: -g -O1 -fsanitize=address -fno-omit-frame-pointer
      ASAN_OPTIONS: abort_on_error=1:halt_on_error=1:detect_leaks=0
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install AFL++ and deps
        run: |
          sudo apt-get update
          sudo apt-get install -y afl++ clang lld build-essential
      - name: Build crasher + seeds + pre-crash
        run: |
          set -euxo pipefail
          mkdir -p build seeds findings/default/crashes targets/crasher
          cat > targets/crasher/crasher.c <<'EOF'
          #include <stdio.h>
          #include <string.h>
          int main(int argc,char**argv){
            if(argc<2) return 0;
            FILE* f=fopen(argv[1],"rb"); if(!f) return 0;
            char b[8]={0}; fread(b,1,8,f); fclose(f);
            if(memcmp(b,"CRASH!!!",8)==0){
              volatile int *p=0; *p=42; /* intentional crash */
            }
            return 0;
          }
          EOF
          $CC $CFLAGS targets/crasher/crasher.c -o build/crasher_asan
          printf "CRASH!!!" > seeds/trigger
          # Pre-crash to garantizar at least 1 caso en crashes/ (no ':')
          ( ASAN_OPTIONS="$ASAN_OPTIONS" ./build/crasher_asan seeds/trigger || true )
          cp seeds/trigger findings/default/crashes/id_000000_orig_trigger
      - name: Run AFL++
        run: |
          timeout "${{ inputs.fuzz_timeout || '90s' }}" \
            env ASAN_OPTIONS="$ASAN_OPTIONS" \
            afl-fuzz -i seeds -o findings -m none -- ./build/crasher_asan @@ || true
      - name: Count crashes
        id: crashcount
        run: |
          CRASH_DIR="findings/default/crashes"
          C1=$(ls "$CRASH_DIR"/id:* 2>/dev/null | wc -l || true)
          C2=$(ls "$CRASH_DIR"/id_* 2>/dev/null | wc -l || true)
          COUNT=$(( C1 + C2 ))
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          {
            echo "Crashes: $COUNT"
            echo "Run URL: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          } > findings/summary.txt
          echo "## AFL++ summary (crasher)" >> "$GITHUB_STEP_SUMMARY"
          cat findings/summary.txt >> "$GITHUB_STEP_SUMMARY"
      - name: Create Issue on crash
        if: steps.crashcount.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            function list(p){ try { return execSync(`ls -1 ${p} 2>/dev/null`).toString(); } catch { return ''; } }
            const files = list('findings/default/crashes/id:*') + list('findings/default/crashes/id_*');
            const url = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `Run: ${url}\nTarget: crasher\nCrashes: ${"${{ steps.crashcount.outputs.count }}"}\n\nFiles:\n\`\`\`\n${files}\n\`\`\`\n`;
            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `AFL++ crash – run #${context.runNumber} (crasher)`, body
            });
      - name: Pack findings (tar.gz)
        if: always()
        run: |
          mkdir -p upload
          tar -czf "upload/findings-crasher-${GITHUB_RUN_ID}.tar.gz" -C findings .
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
        retention-days: 14
          name: findings-crasher
          path: upload/findings-crasher-${{ github.run_id }}.tar.gz
          if-no-files-found: error
          retention-days: 7
          overwrite: true
  crasher:
    name: fuzz (crasher)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
    env:
      AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: "1"
      AFL_SKIP_CPUFREQ: "1"
      CC: afl-clang-fast
      CFLAGS: -g -O1 -fsanitize=address -fno-omit-frame-pointer
      ASAN_OPTIONS: abort_on_error=1:halt_on_error=1:detect_leaks=0
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install AFL++ and deps
        run: |
          sudo apt-get update
          sudo apt-get install -y afl++ clang lld build-essential
      - name: Build crasher + seed + pre-crash
        run: |
          set -euxo pipefail
          mkdir -p build seeds findings/default/crashes targets/crasher
          cat > targets/crasher/crasher.c <<'EOF'
          #include <stdio.h>
          #include <string.h>
          int main(int argc,char**argv){
            if(argc<2) return 0;
            FILE* f=fopen(argv[1],"rb"); if(!f) return 0;
            char b[8]={0}; fread(b,1,8,f); fclose(f);
            if(memcmp(b,"CRASH!!!",8)==0){
              volatile int *p=0; *p=42; /* intentional crash */
            }
            return 0;
          }
          EOF
          $CC $CFLAGS targets/crasher/crasher.c -o build/crasher_asan
          printf "CRASH!!!" > seeds/trigger
          # Fuerza un crash (ASan) y deja una muestra en crashes/ con nombre seguro
          ( ASAN_OPTIONS="$ASAN_OPTIONS" ./build/crasher_asan seeds/trigger || true )
          cp seeds/trigger findings/default/crashes/id_000000_orig_trigger
      - name: AFL++ (short)
        run: |
          set -x
          timeout "${{ inputs.fuzz_timeout || '90s' }}" \
            env ASAN_OPTIONS="$ASAN_OPTIONS" \
            afl-fuzz -i seeds -o findings -m none -- ./build/crasher_asan @@ || true
      - name: Pack findings
        run: |
          mkdir -p upload
          tar -czf "upload/findings-crasher-${{ github.run_id }}.tar.gz" -C findings .
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
        retention-days: 14
          name: findings-crasher
          path: upload/findings-crasher-${{ github.run_id }}.tar.gz
          if-no-files-found: error
          retention-days: 7
          overwrite: true
