name: Fuzzing Pipeline
on: [workflow_dispatch]

jobs:
  fuzz:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4

      - name: Build png_parser
        run: bash ./targets/png_parser/build.sh

      - name: Run AFL++ (2 min)
        shell: bash
        run: |
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \
          timeout 2m afl-fuzz \
            -i ./targets/png_parser/corpus \
            -o out -- \
            ./targets/png_parser/build/pngparse @@ || true

      - name: Package crashes
        shell: bash
        run: |
          if ls out/default/crashes/id:* 1>/dev/null 2>&1; then
            tar -C out/default -czf crashes-png_parser.tar.gz crashes
            true  # fuerza exit 0

            true  # fuerza exit 0
            exit 0  # fuerza c√≥digo 0 para el step
            exit 0  # fuerza c√≥digo 0 para el step
            true  # fuerza exit 0 para todo el step
          fi

      - name: Upload crashes
        if: ${{ hashFiles('crashes-png_parser.tar.gz') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: crashes-png_parser
          path: crashes-png_parser.tar.gz

  analyze:
    needs: fuzz
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: crashes-png_parser
          path: .

      - name: Install gh CLI + llvm-symbolizer
        run: |
          apt-get update -qq
          apt-get install -y --no-install-recommends gh llvm

      - name: Configure git safe.directory
        run: git config --global --add safe.directory "$(pwd)"

      - name: Build png_parser (analyze)
        run: bash ./targets/png_parser/build.sh

      - name: Symbolize & create Issue
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f crashes-png_parser.tar.gz ]; then
            set +e
            mkdir work && tar -xzf crashes-png_parser.tar.gz -C work
            BIN=$(find ./targets/png_parser/build -type f -perm -111 | head -1)

            # Desactiva exit on error durante el bucle
            set +e
            for f in $(find work/crashes -type f -name 'id:*'); do
              # ---------- genera stack-trace ----------
              ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \
              ASAN_OPTIONS=symbolize=1:detect_leaks=0 \
              "$BIN" "$f" 2>&1 > "$(basename "$f").txt" || true

              # ---------- t√≠tulo √∫nico: 1¬™ l√≠nea + timestamp ----------
              summary=$(grep -m1 -v "^$" "$(basename "$f").txt" | cut -c1-120)
              ts=$(date +%F-%H%M)
              title="Crash: $summary [$ts]"

              crash_file=$(basename "$f")

              # ---------- compone cuerpo Markdown ----------
              {
                printf "### üí• Fuzzing crash detected\n\n"
                printf "**Target**: \`png_parser\`\n\n"
                printf "**Input**: \`%s\`\n\n" "$crash_file"

                printf "#### Stack trace\n\n\`\`\`\n";
                cat "$(basename "$f").txt";
                printf "\n\`\`\`\n\n";

                printf "#### Reproduce locally\n\n\`\`\`bash\n";
                printf "./targets/png_parser/build/pngparse work/crashes/%s\n" "$crash_file";
                printf "\`\`\`\n";

                printf "#### Stack trace\n\n\`\`\`\n";
                cat "$(basename "$f").txt";
                printf "\n\`\`\`\n\n";

                printf "#### Reproduce locally\n\n\`\`\`bash\n";
                printf "./targets/png_parser/build/pngparse work/crashes/%s\n" "$crash_file";
                printf "\`\`\`\n";
              } > issue_body.md

              # ---------- crea Issue ----------
              gh issue create --title "$title" --body-file issue_body.md
            # Reactiva exit on error
            set -e
            done
            true  # fuerza exit 0 para el step
          else
            echo "No crash artefact found ‚Äî nothing to analyze."
            true  # fuerza exit 0

            true  # fuerza exit 0
            exit 0  # fuerza c√≥digo 0 para el step
            exit 0  # fuerza c√≥digo 0 para el step
            true  # fuerza exit 0 para todo el step
          fi
