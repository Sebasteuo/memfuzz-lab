name: Fuzzing Pipeline

on:
  workflow_dispatch:
    inputs:
      fuzz_timeout:
        description: "Max fuzzing time (e.g. 30s, 5m, 0 = unlimited)"
        default: "30s"
        required: false
  push:
    branches: [ main ]

jobs:
  fuzz:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [png_parser, xxd]

    env:
      OUT_DIR: out/default

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install AFL++ and libpng
      run: |
        sudo apt-get update
        sudo apt-get install -y afl++ libpng-dev

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ compilar segÃºn el target â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Build target (ASan)
      shell: bash
      run: |
        export CC=afl-clang-fast
        export CXX=afl-clang-fast++
        CFLAGS="-g -O2 -fsanitize=address -fno-omit-frame-pointer"

        if [ "${{ matrix.target }}" = "png_parser" ]; then
          mkdir -p targets/png_parser/build
          ${CC} ${CFLAGS} targets/png_parser/src/pngparse.c \
                -o targets/png_parser/build/pngparse -lpng -lz
        else
          mkdir -p targets/xxd/build
          ${CC} ${CFLAGS} targets/xxd/src/xxd.c \
                -o targets/xxd/build/xxd
        fi

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ejecutar AFL++ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Run AFL++
      shell: bash
      env:
        TIMEOUT: ${{ github.event.inputs.fuzz_timeout || '30s' }}
        AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1
      run: |
        TARGET="${{ matrix.target }}"
        mkdir -p ${OUT_DIR}

        if [ "$TARGET" = "png_parser" ]; then
          BIN=targets/png_parser/build/pngparse
          CORP=targets/png_parser/corpus
        else
          BIN=targets/xxd/build/xxd
          CORP=targets/xxd/corpus
        fi

        if [ "$TIMEOUT" = "0" ]; then
          echo "Running fuzzing with NO timeout (CI limit 6h)â€¦"
          afl-fuzz -i "$CORP" -o ${OUT_DIR} -- "$BIN" @@
        else
          echo "Running fuzzing for $TIMEOUT â€¦"
          timeout "$TIMEOUT" \
            afl-fuzz -i "$CORP" -o ${OUT_DIR} -- "$BIN" @@ \
            || [ $? = 124 ]
        fi

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ empaquetar crashes â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Package crashes
      id: pkg
      shell: bash
      run: |
        echo "ðŸ“¦ Packaging crashes (if any)â€¦"
        if compgen -G '${OUT_DIR}/crashes/id:*' > /dev/null; then
          tar -czf crashes-${{ matrix.target }}.tar.gz -C ${OUT_DIR} crashes
          echo "has_crash=true" >> "$GITHUB_OUTPUT"
        else
          echo "has_crash=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload crashes artefact
      if: steps.pkg.outputs.has_crash == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: crashes-${{ matrix.target }}
        path: crashes-${{ matrix.target }}.tar.gz

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ simbolizar y crear Issue â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Symbolize & create Issue
      if: steps.pkg.outputs.has_crash == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tar -xzf crashes-${{ matrix.target }}.tar.gz -C .
        if [ "${{ matrix.target }}" = "png_parser" ]; then
          BIN=targets/png_parser/build/pngparse
        else
          BIN=targets/xxd/build/xxd
        fi

        for f in crashes/id:*; do
          out=$(mktemp)
          ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \
          ASAN_OPTIONS=symbolize=1:detect_leaks=0 \
          "$BIN" "$f" 2>&1 | tee "$out" >/dev/null || true

          title=$(grep -m1 -v '^$' "$out" | cut -c1-120)
          [ -z "$title" ] && title="ASAN crash"
          title="Crash: ${title} [${{ matrix.target }}]"

          gh issue create \
            --title "$title" \
            --label auto-crash \
            --body "$(printf '### ðŸ’¥ Crash in **%s**\n\n**Input**: `%s`\n\n```text\n%s\n```' "${{ matrix.target }}" "$(basename "$f")" "$(cat "$out")")"
        done
