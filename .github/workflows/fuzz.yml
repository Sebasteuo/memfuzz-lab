name: Fuzzing Pipeline
on: [workflow_dispatch]

jobs:
  fuzz:
    strategy:
      matrix:
        target: [png_parser, qemu_elf]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4

      - name: Build target
        shell: bash
        run: |
          bash ./targets/${{ matrix.target }}/build.sh

      - name: Run AFL++
        shell: bash
        run: |
          BIN=$(basename $(ls ./targets/${{ matrix.target }}/build))
          [[ "${{ matrix.target }}" == "qemu_elf" ]] && MODE="-Q" || MODE=""
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \
          timeout 2m afl-fuzz $MODE \
            -i ./targets/${{ matrix.target }}/corpus \
            -o out -- \
            ./targets/${{ matrix.target }}/build/$BIN @@ || true

      - id: package
        name: Package crashes
        shell: bash
        run: |
          if [ -d out/default/crashes ] && [ "$(ls -A out/default/crashes)" ]; then
            tar -C out/default -czf crashes-${{ matrix.target }}.tar.gz crashes
            echo "has_crashes=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_crashes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload crashes
        if: steps.package.outputs.has_crashes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: crashes-${{ matrix.target }}
          path: crashes-${{ matrix.target }}.tar.gz

  analyze:
    needs: fuzz
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: 'crashes-*'
          path: '.'

      - name: Install GitHub CLI
        run: |
          apt-get update -qq
          apt-get install -y --no-install-recommends gh

      - name: Symbolize crashes

        shell: bash

        run: |

          mkdir -p work

          shopt -s nullglob

          for tar in crashes-*.tar.gz; do

            [[ -e "$tar" ]] || continue

            target=${tar#crashes-}; target=${target%.tar.gz}

            tar -xzf "$tar" -C work

            echo "[DEBUG] Contenido extraÃ­do de $tar:"

            find work -maxdepth 3 -type f | sed "s/^/  /"

            FULLBIN=$(find ./targets/$target/build -type f -perm -111 | head -1)

            echo "[DEBUG] Usando ejecutable $FULLBIN"

            for f in $(find work/crashes -type f); do

              echo "[DEBUG] Procesando $f"

              ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \

              ASAN_OPTIONS=symbolize=1:detect_leaks=0 \

              "$FULLBIN" "$f" 2>&1 | /usr/bin/asan_symbolize-18 \

                > "$(basename "$f").$target.txt" || true

            done

          done

          echo "=== TXT generados ==="

          ls -1 *.txt || true

          echo "====================="
          ls -1 *.txt || true
          echo "====================="

      - name: Create GitHub Issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          shopt -s nullglob
          for r in *.txt; do
            title=$(head -1 "$r" | cut -c1-120)
            if ! gh issue list --state all --search "$title" | grep -q "$title"; then
              target=${r##*.txt}; target=${target##*.}
              gh issue create --title "Crash: $title" \
                              --body "Target **$target**\n\n\`\`\`\n$(cat "$r")\n\`\`\`"
            fi
          done
