name: Fuzzing Pipeline
on: [workflow_dispatch]

jobs:
  fuzz:
    strategy:
      matrix: { target: [png_parser, qemu_elf] }
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4

      - name: Build target
        run: bash ./targets/${{ matrix.target }}/build.sh

      - name: Run AFL++
        shell: bash
        run: |
          BIN=$(basename $(ls ./targets/${{ matrix.target }}/build))
          [[ "${{ matrix.target }}" == "qemu_elf" ]] && MODE="-Q" || MODE=""
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \
          timeout 2m afl-fuzz $MODE \
            -i ./targets/${{ matrix.target }}/corpus \
            -o out -- \
            ./targets/${{ matrix.target }}/build/$BIN @@ || true

      - id: package
        run: |
          if [ -d out/default/crashes ] && [ "$(ls -A out/default/crashes)" ]; then
            tar -C out/default -czf crashes-${{ matrix.target }}.tar.gz crashes
            echo "has=true" >> $GITHUB_OUTPUT
          fi

      - if: steps.package.outputs.has == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: crashes-${{ matrix.target }}
          path: crashes-${{ matrix.target }}.tar.gz

  analyze:
    needs: fuzz
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sebasteuo/memfuzz-lab:latest
      options: --user 0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { pattern: 'crashes-*', path: '.' }

      # recompila los binarios para que existan
      - name: Build targets (analyze)
        shell: bash
        run: |
          for t in png_parser qemu_elf; do
            bash ./targets/$t/build.sh
          done

      - name: Symbolize crashes
        shell: bash
        run: |
          for tar in $(find . -name 'crashes-*.tar.gz'); do
            fname=$(basename "$tar")
            target=${fname#crashes-}; target=${target%.tar.gz}
            mkdir -p work && tar -xzf "$tar" -C work
            BIN=$(find ./targets/$target/build -type f -perm -111 | head -1)
            for f in $(find work/crashes -type f); do
              ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \
              ASAN_OPTIONS=symbolize=1:detect_leaks=0 \
              "$BIN" "$f" 2>&1 | /usr/bin/asan_symbolize-18 \
                > "$(basename "$f").$target.txt" || true
            done
          done

      - name: Create GitHub Issues
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        shell: bash
        run: |
          shopt -s nullglob
          for r in *.txt; do
            title=$(head -1 "$r" | cut -c1-120)
            if ! gh issue list --state all --search "$title" | grep -q "$title"; then
              target=${r##*.txt}; target=${target##*.}
              gh issue create --title "Crash: $title" \
                              --body "Target **$target**\n\n\`\`\`\n$(cat "$r")\n\`\`\`"
            fi
          done
