name: Fuzzing Pipeline

on:
  workflow_dispatch:
    inputs:
      fuzz_timeout:
        description: "Max fuzzing time (e.g. 30s, 5m, 0 = unlimited)"
        default: "30s"
        required: false
  push:
    branches: [ main ]

jobs:
  fuzz:
    runs-on: ubuntu-latest
    env:
      # carpeta de salida para AFL++
      OUT_DIR: out/default

    steps:
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ checkout â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout repo
      uses: actions/checkout@v4
   
    - name: Install AFL++ and libpng
      run: |
        sudo apt-get update
        sudo apt-get install -y afl++ libpng-dev
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ build target â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Build png_parser (ASan)
      shell: bash
      run: |
        export CC=afl-clang-fast
        export CXX=afl-clang-fast++
        CFLAGS="-g -O2 -fsanitize=address -fno-omit-frame-pointer"
        mkdir -p targets/png_parser/build
        ${CC} ${CFLAGS} targets/png_parser/src/pngparse.c -o targets/png_parser/build/pngparse -lpng -lz

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ run AFL++ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Run AFL++
      shell: bash
      env:
        TIMEOUT: ${{ github.event.inputs.fuzz_timeout || '30s' }}
        AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1
      run: |
        mkdir -p ${OUT_DIR}
        if [ "$TIMEOUT" = "0" ]; then
          echo "Running fuzzing with NO timeout (CI limit 6â€¯h)â€¦"
          afl-fuzz -i targets/png_parser/corpus -o ${OUT_DIR} \
                   -- targets/png_parser/build/pngparse @@
        else
          echo "Running fuzzing for $TIMEOUT â€¦"
          timeout "$TIMEOUT" \
            afl-fuzz -i targets/png_parser/corpus -o ${OUT_DIR} \
                     -- targets/png_parser/build/pngparse @@ \
            || [ $? = 124 ]
        fi

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ package crashes + expose has_crash output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Package crashes
      id: pkg
      shell: bash
      run: |
        echo "ðŸ“¦ Packaging crashes (if any)â€¦"
        if compgen -G '${OUT_DIR}/crashes/id:*' > /dev/null; then
          tar -czf crashes-png_parser.tar.gz -C ${OUT_DIR} crashes
          echo "has_crash=true" >> "$GITHUB_OUTPUT"
          echo "has_crash=true"
        else
          echo "has_crash=false" >> "$GITHUB_OUTPUT"
          echo "has_crash=false"
        fi

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ upload artefact (optional) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Upload crashes artefact
      if: steps.pkg.outputs.has_crash == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: crashes-png_parser
        path: crashes-png_parser.tar.gz

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ symbolize trace + open Issue only when crash â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Symbolize & create Issue
      if: steps.pkg.outputs.has_crash == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # descomprime input y ejecuta el binario para capturar la traza
        tar -xzf crashes-png_parser.tar.gz -C .
        BIN=targets/png_parser/build/pngparse
        for f in crashes/id:*; do
          out=$(mktemp)
          ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer) \
          ASAN_OPTIONS=symbolize=1:detect_leaks=0 \
          "$BIN" "$f" 2>&1 | tee "$out" >/dev/null || true

          title="$(grep -m1 -v '^$' "$out" | cut -c1-120)"
          [ -z "$title" ] && title="ASAN SEGV crash"
          title="Crash: $title [$(date +%F-%H%M)]"

          gh issue create \
            --repo "$GITHUB_REPOSITORY" \
            --title "$title" \
            --label auto-crash \
            --body "$(printf '### ðŸ’¥ Fuzzing crash detected\n\n**Input**: `%s`\n\n```\n%s\n```' "$(basename "$f")" "$(cat "$out")")"
        done
