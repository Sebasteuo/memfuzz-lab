name: Fuzzing Report (post-pipeline)

on:
  workflow_run:
    workflows: ["Fuzzing Pipeline"]
    types: [completed]

jobs:
  report:
    name: report (${{ matrix.target }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read     # necesario para descargar artifacts de OTRO run
      issues: write

    strategy:
      fail-fast: false
      matrix:
        target: [png_parser, xxd]

    steps:
      - name: Intento 1: descargar artifact "crashes-${{ matrix.target }}"
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: crashes-${{ matrix.target }}
          path: dl/${{ matrix.target }}/crashes
          if-no-files-found: ignore

      - name: Intento 2: descargar artifacts que empiecen con "findings-${{ matrix.target }}-"
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ github.event.workflow_run.id }}
          pattern: findings-${{ matrix.target }}-*
          path: dl/${{ matrix.target }}/findings
          merge-multiple: true
          if-no-files-found: ignore

      - name: Descomprimir (si existe) y contar crashes
        id: count
        shell: bash
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          mkdir -p out/"$T"

          # Busca cualquier .tar.gz descargado (de crashes o de findings)
          TAR=$(find "dl/$T" -type f -name '*.tar.gz' | head -n1 || true)

          COUNT=0
          if [ -n "${TAR:-}" ]; then
            tar -xzf "$TAR" -C out/"$T"
            C1=$(ls out/"$T"/default/crashes/id:* 2>/dev/null | wc -l || true)
            C2=$(ls out/"$T"/default/crashes/id_* 2>/dev/null | wc -l || true)
            COUNT=$(( C1 + C2 ))
          fi

          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          {
            echo "Target: $T"
            echo "Crashes: $COUNT"
            echo "From run: ${{ github.event.workflow_run.html_url }}"
          } | tee out/"$T"/report.txt

      - name: Abrir Issue si hay crashes
        if: steps.count.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            const T = "${{ matrix.target }}";
            let files = '';
            try {
              files = execSync(`ls -1 out/${T}/default/crashes/id:* out/${T}/default/crashes/id_* 2>/dev/null || true`).toString();
            } catch (e) {}
            const url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.event.workflow_run.id }}`;
            const body = [
              `Pipeline run: ${url}`,
              `Target: ${T}`,
              `Crashes: ${{ steps.count.outputs.count }}`,
              "",
              "Inputs que crashean:",
              "```",
              files,
              "```"
            ].join("\n");
            const res = await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `AFL++ crash – ${T} (post-pipeline) – run #${{ github.event.workflow_run.run_number }}`,
              body
            });
            core.notice(`Issue: ${res.data.html_url}`);

      - name: Subir reporte como artifact (siempre)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.target }}-${{ github.event.workflow_run.id }}
          path: out/${{ matrix.target }}/report.txt
          if-no-files-found: warn
          retention-days: 7
