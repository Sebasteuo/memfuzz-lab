name: Fuzzing Report (post-pipeline)

on:
  workflow_run:
    workflows: ["Fuzzing Pipeline"]
    types: [completed]
  workflow_dispatch:
    inputs:
      pipeline_run_id:
        description: "Actions run_id del pipeline a analizar"
        required: true

jobs:
  meta:
    name: post-meta
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      actions: write
    env:
      PIPE_RID: ${{ github.event.workflow_run.id || inputs.pipeline_run_id }}
    steps:
      - name: Create meta report
        run: |
          set -euo pipefail
          mkdir -p out/meta
          {
            echo "Post-pipeline meta"
            echo "From pipeline run: https://github.com/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}"
            echo "Pipeline RID: ${{ env.PIPE_RID }}"
            echo "This post RID: ${{ github.run_id }}"
          } > out/meta/report.txt
          ls -l out/meta
      - name: Upload meta artifact
        uses: actions/upload-artifact@v4
        with:
          name: post-meta-${{ env.PIPE_RID }}
          path: out/meta
          if-no-files-found: error
          retention-days: 7

  report:
    name: report (${{ matrix.target }})
    needs: meta
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: write
      issues: write
    env:
      PIPE_RID: ${{ github.event.workflow_run.id || inputs.pipeline_run_id }}

    strategy:
      fail-fast: false
      matrix:
        target: [png_parser, xxd, crasher]

    steps:
      - name: Prepare dirs
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          mkdir -p "dl/$T" "out/$T"

      # 1) crashes-<target> (si existe)
      - name: Download crashes artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          name: crashes-${{ matrix.target }}
          path: dl/${{ matrix.target }}/crashes
          if-no-files-found: ignore

      # 2) findings-<target> por NOMBRE EXACTO (ej: findings-crasher)
      - name: Download findings (exact name)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          name: findings-${{ matrix.target }}
          path: dl/${{ matrix.target }}/findings_exact
          if-no-files-found: ignore

      # 3) findings que EMPIECEN con findings-<target> (ej: findings-crasher-<RID>)
      - name: Download findings (pattern)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          pattern: findings-${{ matrix.target }}*
          path: dl/${{ matrix.target }}/findings_pat
          merge-multiple: true
          if-no-files-found: ignore

      - name: Unpack and count (ALL tars)
        id: count
        shell: bash
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          echo "== DL TREE (dl/$T) =="
          ls -R "dl/$T" || true

          COUNT=0
          # Extrae TODOS los .tar.gz encontrados bajo dl/<target>/*
          while IFS= read -r -d '' TAR; do
            echo "Extracting: $TAR"
            tar -xzf "$TAR" -C "out/$T"
          done < <(find "dl/$T" -type f -name '*.tar.gz' -print0 2>/dev/null || true)

          # Cuenta con id:* (AFL) y id_* (nuestro safe-name)
          C1=$(ls "out/$T"/default/crashes/id:* 2>/dev/null | wc -l || true)
          C2=$(ls "out/$T"/default/crashes/id_* 2>/dev/null | wc -l || true)
          COUNT=$(( C1 + C2 ))

          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          {
            echo "Target: $T"
            echo "Crashes: $COUNT"
            echo "From run: https://github.com/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}"
          } > "out/$T/report.txt"

          echo "== OUT TREE (out/$T) =="
          ls -R "out/$T" || true

      - name: Open issue if crashes
        if: steps.count.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const T = "${{ matrix.target }}";
            const rid = process.env.PIPE_RID;
            const url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${rid}`;
            const body = `Pipeline run: ${url}\nTarget: ${T}\nCrashes: ${{ steps.count.outputs.count }}`;
            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `AFL++ crash – ${T} (post) – run ${rid}`,
              body
            });

      - name: Upload target report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.target }}-${{ env.PIPE_RID }}
          path: out/${{ matrix.target }}
          if-no-files-found: warn
          retention-days: 7
