name: Fuzzing Report (post-pipeline)

on:
  workflow_run:
    workflows: ["Fuzzing Pipeline"]
    types: [completed]

jobs:
  meta:
    name: post-meta
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      actions: write
    steps:
      - name: Crear meta/reporte
        run: |
          mkdir -p out/meta
          {
            echo "Post-pipeline meta"
            echo "From pipeline run: ${{ github.event.workflow_run.html_url }}"
            echo "Pipeline RID: ${{ github.event.workflow_run.id }}"
            echo "This run_id (post): ${{ github.run_id }}"
          } | tee out/meta/report.txt
          ls -l out/meta
      - name: Subir artifact meta (garantizado)
        uses: actions/upload-artifact@v4
        with:
          name: post-meta-${{ github.event.workflow_run.id }}
          path: out/meta
          if-no-files-found: error
          retention-days: 7

  report:
    name: report (${{ matrix.target }})
    needs: meta
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: write
      issues: write

    strategy:
      fail-fast: false
      matrix:
        target: [png_parser, xxd]

    steps:
      - name: Preparar carpetas
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          mkdir -p "dl/$T" "out/$T"

      - name: Intento 1: descargar artifact "crashes-${{ matrix.target }}"
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: crashes-${{ matrix.target }}
          path: dl/${{ matrix.target }}/crashes
          if-no-files-found: ignore

      - name: Intento 2: descargar artifacts "findings-${{ matrix.target }}-*"
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ github.event.workflow_run.id }}
          pattern: findings-${{ matrix.target }}-*
          path: dl/${{ matrix.target }}/findings
          merge-multiple: true
          if-no-files-found: ignore

      - name: Descomprimir y contar crashes
        id: count
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          echo "== Contenido descargado (dl/$T) =="
          ls -R "dl/$T" || true

          TAR=$(find "dl/$T" -type f -name '*.tar.gz' | head -n1 || true)
          COUNT=0
          if [ -n "${TAR:-}" ]; then
            echo "Usando TAR: $TAR"
            tar -xzf "$TAR" -C "out/$T"
            C1=$(ls "out/$T"/default/crashes/id:* 2>/dev/null | wc -l || true)
            C2=$(ls "out/$T"/default/crashes/id_* 2>/dev/null | wc -l || true)
            COUNT=$(( C1 + C2 ))
          else
            echo "No se encontró .tar.gz; generando reporte con Crashes: 0"
          fi

          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          {
            echo "Target: $T"
            echo "Crashes: $COUNT"
            echo "From run: ${{ github.event.workflow_run.html_url }}"
          } > "out/$T/report.txt"

          echo "== Contenido para subir (out/$T) =="
          ls -l "out/$T" || true

      - name: Abrir Issue si hay crashes
        if: steps.count.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        # Nota: github-script usa Node; no necesita 'actions' especiales para abrir Issues
          script: |
            const { execSync } = require('child_process');
            const T = "${{ matrix.target }}";
            let files = '';
            try {
              files = execSync(`ls -1 out/${T}/default/crashes/id:* out/${T}/default/crashes/id_* 2>/dev/null || true`).toString();
            } catch (e) {}
            const url = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.event.workflow_run.id }}`;
            const body = `Pipeline run: ${url}\nTarget: ${T}\nCrashes: ${{ steps.count.outputs.count }}\n\nInputs:\n\`\`\`\n${files}\n\`\`\`\n`;
            const res = await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `AFL++ crash – ${T} (post-pipeline) – run #${{ github.event.workflow_run.run_number }}`,
              body
            });
            core.notice(`Issue: ${res.data.html_url}`);

      - name: Subir reporte como artifact (siempre)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.target }}-${{ github.event.workflow_run.id }}
          path: out/${{ matrix.target }}
          if-no-files-found: warn
          retention-days: 7
