name: Fuzzing Report (post-pipeline)

on:
  workflow_run:
    workflows: ["Fuzzing Pipeline"]
    types: [completed]
  workflow_dispatch:
    inputs:
      pipeline_run_id:
        description: "Actions run_id del pipeline a analizar"
        required: true

jobs:
  meta:
    name: post-meta
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      actions: write
    env:
      PIPE_RID: ${{ github.event.workflow_run.id || inputs.pipeline_run_id }}
    steps:
      - name: Create meta report
        run: |
          set -euo pipefail
          mkdir -p out/meta
          {
            echo "Post-pipeline meta"
            echo "From pipeline run: https://github.com/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}"
            echo "Pipeline RID: ${{ env.PIPE_RID }}"
            echo "This post RID: ${{ github.run_id }}"
          } > out/meta/report.txt
          ls -l out/meta
      - name: Upload meta artifact
        uses: actions/upload-artifact@v4
        with:
          name: post-meta-${{ env.PIPE_RID }}
          path: out/meta
          retention-days: 7

  report:
    name: report (${{ matrix.target }})
    needs: meta
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: write
      issues: write
    env:
      PIPE_RID: ${{ github.event.workflow_run.id || inputs.pipeline_run_id }}

    strategy:
      fail-fast: false
      matrix:
        target: [png_parser, xxd, crasher]

    steps:
      - name: Prepare dirs
        run: |
          set -euo pipefail
          T="${{ matrix.target }}"
          mkdir -p "dl/$T" "out/$T"

      - name: DEBUG – List artifacts from pipeline run
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Artifacts in run ${{ env.PIPE_RID }}:"
          gh api repos/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}/artifacts \
            -q '.artifacts[] | [.name, .size_in_bytes] | @tsv' || true

      # Findings por nombre y patrones simétricos
      - name: Download findings (exact)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          name: findings-${{ matrix.target }}
          path: dl/${{ matrix.target }}/findings-exact

      - name: Download findings (*-<target>)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          pattern: findings-*-${{ matrix.target }}
          path: dl/${{ matrix.target }}/findings-star-left
          merge-multiple: true

      - name: Download findings (<target>-*)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          pattern: findings-${{ matrix.target }}-*
          path: dl/${{ matrix.target }}/findings-star-right
          merge-multiple: true

      # Crashes: nombre por target y fallback 'crashes' para crasher
      - name: Download crashes (<target>)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          name: crashes-${{ matrix.target }}
          path: dl/${{ matrix.target }}/crashes-named

      - name: Download crashes (fallback 'crashes' for crasher)
        if: matrix.target == 'crasher'
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ env.PIPE_RID }}
          name: crashes
          path: dl/${{ matrix.target }}/crashes-fallback

      - name: Unpack and count (extract ALL .tar.gz)
        id: count
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          T="${{ matrix.target }}"

          echo "== DL TREE (dl/$T) =="
          ls -R "dl/$T" || true

          mapfile -t TARS < <(find "dl/$T" -type f -name '*.tar.gz' | sort)
          echo "Found ${#TARS[@]} tar.gz under dl/$T"

          for F in "${TARS[@]}"; do
            echo ">> Extracting: $F"
            tar -tzf "$F" | sed 's/^/    TAR: /' || true
            tar -xzf "$F" -C "out/$T" || true
          done

          echo "== OUT TREE (out/$T) =="
          ls -R "out/$T" || true

          C1=$(ls "out/$T"/default/crashes/id:* 2>/dev/null | wc -l || true)
          C2=$(ls "out/$T"/default/crashes/id_* 2>/dev/null | wc -l || true)
          COUNT=$(( C1 + C2 ))
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

          {
            echo "Target: $T"
            echo "Crashes: $COUNT"
            echo "From run: https://github.com/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}"
          } > "out/$T/report.txt"

      - name: Open issue if crashes
        if: steps.count.outputs.count != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const T = "${{ matrix.target }}";
            let files = '';
            try {
              files = fs.readdirSync(`out/${T}/default/crashes`).map(f => `out/${T}/default/crashes/${f}`).join("\n");
            } catch (e) {}
            const url = `https://github.com/${{ github.repository }}/actions/runs/${{ env.PIPE_RID }}`;
            const body = `Pipeline run: ${url}\nTarget: ${T}\nCrashes: ${{ steps.count.outputs.count }}\n\nInputs:\n\`\`\`\n${files}\n\`\`\`\n`;
            const res = await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `AFL++ crash – ${T} (post-pipeline) – run #${{ env.PIPE_RID }}`,
              body
            });
            core.notice(`Issue: ${res.data.html_url}`);

      - name: Upload target report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.target }}-${{ env.PIPE_RID }}
          path: out/${{ matrix.target }}
          retention-days: 7
